version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: ankercloud-postgres
    environment:
      POSTGRES_DB: ankercloud_monitoring
      POSTGRES_USER: ankercloud
      POSTGRES_PASSWORD: ankercloud_secret
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - ankercloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ankercloud"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: ankercloud-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ankercloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    container_name: ankercloud-api
    environment:
      DATABASE_URL: postgresql://ankercloud:ankercloud_secret@postgres:5432/ankercloud_monitoring
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      NODE_ENV: production
      PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ankercloud-network
    restart: unless-stopped

  # Scheduler Service
  scheduler:
    build:
      context: ./backend/scheduler
      dockerfile: Dockerfile
    container_name: ankercloud-scheduler
    environment:
      DATABASE_URL: postgresql://ankercloud:ankercloud_secret@postgres:5432/ankercloud_monitoring
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ankercloud-network
    restart: unless-stopped

  # Worker Service
  workers:
    build:
      context: ./backend/workers
      dockerfile: Dockerfile
    container_name: ankercloud-workers
    environment:
      DATABASE_URL: postgresql://ankercloud:ankercloud_secret@postgres:5432/ankercloud_monitoring
      REDIS_URL: redis://redis:6379
      API_ENDPOINT: http://api:3001/api/ingest
      WORKER_API_KEY: worker_key_change_in_production
      NODE_ENV: production
    depends_on:
      - api
      - redis
    networks:
      - ankercloud-network
    restart: unless-stopped
    # Required for ping and traceroute
    cap_add:
      - NET_RAW
      - NET_ADMIN

  # Frontend Dashboard
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ankercloud-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://api:3001/api
    ports:
      - "3005:3005"
    depends_on:
      - api
    networks:
      - ankercloud-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: ankercloud-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api
    networks:
      - ankercloud-network
    restart: unless-stopped

networks:
  ankercloud-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
